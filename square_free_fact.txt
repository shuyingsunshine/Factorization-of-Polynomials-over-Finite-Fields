load "gcd.txt";

function square_free_fact(f);
//given monic polynomial f, returns the square free factorization of f
   LF := Parent(LeadingCoefficient(f));
   lp := #(PrimeField(LF)); 
   R<x> := Parent(f);
   res := AssociativeArray();   //use AssociativeArray to record the square free factors and their corresponding exponent.
  
   if (f eq 1) then
        return res;
   end if;        
   h := Derivative(f);
   if (h eq 0) then            //this is the case when gcd(f,h) is 0;
      t := 0;
      for i := 0 to (Degree(f) div lp) do
         a := Coefficient(f,lp*i);
         a := Root(a,lp);
         t := t + a*x^i;    
      end for;
      res := square_free_fact(t);
      for poly in Keys(res) do
          res[poly] := res[poly]*lp;
      end for;
      return res;
    end if; 
    h := h/LeadingCoefficient(h);   
    d := gcd(f,h);          
    if (d eq 1) then        //this is the case when gcd is 1, so you have already square free f, return that one;
         res[f] := 1;
         return res;
    end if;
    A := divalg(f,d);     
    r := A[1];            // r is f/d, and r is indeed square free, we just need to attach this r to the result of factorization of d;
    res := square_free_fact(d);
    if (IsDefined(res,r)) then    
       res[r] := res[r]+1;
    else
        res[r] := 1;
    end if;
    return res;
end function;

procedure print_square_free_fact(f);   
// this helps to see the result easily.
    res := square_free_fact(f);
    for poly in Keys(res) do
        print <poly,res[poly]>;
    end for;
end procedure;
