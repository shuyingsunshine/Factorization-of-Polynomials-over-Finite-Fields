load "distinct_degree_fact.txt"

function random_poly(n,F);
//generates a random monic polynomial of degree n in F[X]
    R<x>  := PolynomialRing(F);
    f := x^n;
    for i := 0 to n-1 do
        f := f + Random(F)*x^i;
    end for;
    return(f);
end function;

function high_power(h,f,d,k);
//given a monic polynomial f and  a polynomial h in F_q[x], returns h^((q^d-1)/2) mod f if q is odd, returns h^((q^d-1)/3) mod f if q is even;
    
    temp := h;
    res := h;
    for i:= 1 to d-1 do
         temp := basic_step(temp,f,k);
         res := res*temp;
         res := general_divalg(res,f)[2];
    end for;
    if q mod 2 eq 1 then
        a := (k-1) div 2;
        res := basic_step(res,f,a);
        return res;
    else
        a := (k-1) div 3;
        res := basic_step(res,f,a);
        return res;
    end if;
end function;

function equal_deg_fact_odd(f,d);
//if F is of odd order, given a monic square free polynomial f of positive degree that is known to be the product of irreducible polynomials of degree d, returns the canonical factorization of f.

     LF := Parent(LeadingCoefficient(f));
     lq := #LF;
     res := [];
     if Degree(f) eq d then //then of course, f is irreducible.
        Append(~res,f);
        return res;
     end if;
     D := 1;
     while (D eq 1) or (D eq 0) do
        deg := Random(1,Degree(f)-1);
        h := random_poly(deg,Parent(LeadingCoefficient(f)));  //choose h randomly
        a := gcd(f,h);
        if not a  eq 1 then  // then you already have a proper factor of f, which is “a”
           D := a;
        else
           temp := high_power(h,f,d,lq)-1;
           if temp eq 0 then
               D := 0;
           else
              temp := temp/LeadingCoefficient(temp);
              D := gcd(f,temp);
           end if;
        end if;
     end while;
     r := divalg(f,D)[1];
     A := equal_deg_fact_odd(D,d);
     B := equal_deg_fact_odd(r,d);
     for poly in A do
         Append(~res,poly);
     end for;
     for poly in B do
         Append(~res,poly);
     end for;
     return res;
end function;
           
       
function equal_deg_fact_even(f,d); 
//if F is of even order and 1 mod 3, given a monic square free polynomial f of positive degree that is known to be the product of irreducible polynomials of degree d, returns the canonical factorization of f.
    LF := Parent(LeadingCoefficient(f));
    lq := #LF;
    res := [];
    if Degree(f) eq d then //then of course, f is irreducible.
       Append(~res,f);
       return res;
    end if;
    m := (lq-1) div 3;
    alpha := (Generator(LF))^m;
    found := false;
    while(found eq false) do
        deg := Random(1,Degree(f)-1);
        h := random_poly(deg,Parent(LeadingCoefficient(f)));
        a := gcd(f,h);
        if not a eq 1 then // then you already have a proper factor of f, which is ‘a’
            D := a;
            found := true;
        else
            temp1 := high_power(h,f,d,lq)-alpha;
            if not temp1 eq 0 then
                temp1 := temp1/LeadingCoefficient(temp1);
                D := gcd(f,temp1);
                if D eq 1 then
                    temp2 := high_power(h,f,d,lq)-alpha^2;
                    if not temp2 eq 0 then
                        temp2 := temp2/LeadingCoefficient(temp2);
                        D := gcd(f,temp2);
                        if not D eq 1 then
                            found := true;
                        end if;
                    end if;
                else
                    found := true;
                end if;
            end if;
        end if;
    end while;
    r := divalg(f,D)[1];
    A := equal_deg_fact_even(D,d);
    B := equal_deg_fact_odd(r,d);
    for poly in A do
        Append(~res,poly);
    end for;
    for poly in B do
        Append(~res,poly);
    end for;
    return res;
end function; 
          

function equal_deg_fact(f,d);
//given a monic square free polynomial f of positive degree that is known to be the product of irreducible polynomials of degree d, returns the canonical factorization of f. only deals with odd q and even 1 mod 3 q
 
    LF := Parent(LeadingCoefficient(f));
    if (#LF) mod 2 eq 1 then
        return equal_deg_fact_odd(f,d);
    else
        return equal_deg_fact_even(f,d);
    end if;
end function;
